import numpy as np
import numpy as np
import sys
sys.path.append('/Users/tghaddar/GitHub/TarekGhaddarGraduateWork/sweep_optimizer/3d')
from sweep_solver import optimized_tts_numerical,unpack_parameters,plot_subset_boundaries_2d
from mesh_processor import create_2d_cuts
from optimizer import create_parameter_space,create_bounds,create_constraints,get_column_cdf,create_opt_cut_suite,get_opt_cut_suite_best,get_highest_jumps
from scipy.optimize import basinhopping, minimize
import matplotlib.pyplot as plt
from build_global_subset_boundaries import build_global_subset_boundaries
import itertools

hand_balanced = [10, 10, 10, 8, 2, 2, 4, 2, 2, 4, 2, 2, 2, 10, 10, 10, 8, 2, 4, 4, 4, 2, 4, 2, 2, 2, 5, 5, 5, 4, 1, 2, 2, 2, 1, 2, 2, 1, 15, 5, 5, 5, 4, 1, 2, 2, 2, 1, 2, 2, 1, 15, 5, 5, 5, 4, 1, 2, 2, 2, 1, 2, 2, 1, 15, 5, 5, 5, 4, 1, 2, 2, 2, 1, 2, 2, 1, 15, 15, 15, 15, 12, 3, 5, 6, 5, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 10, 10, 10, 13, 16, 10, 11, 16, 13, 11, 4, 4, 4, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 5, 5, 3, 3, 5, 4, 4, 5, 6, 4, 5, 5, 5, 5, 5, 3, 3, 5, 4, 4, 6, 10, 13, 5, 5, 5, 5, 5, 3, 3, 5, 4, 5, 10, 14, 14, 5, 5, 5, 5, 5, 3, 3, 5, 4, 4, 5, 11, 11, 5, 5, 5, 5, 5, 3, 3, 5, 4, 4, 5, 11, 11, 5, 5, 5, 5, 5, 3, 3, 5, 4, 5, 10, 14, 14, 5, 5, 5, 5, 5, 3, 3, 5, 4, 4, 6, 10, 13, 5, 5, 5, 5, 5, 3, 3, 5, 4, 4, 5, 6, 4, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 5, 5, 5, 9, 15, 9, 9, 15, 12, 9, 3, 3, 3, 10, 10, 10, 13, 16, 10, 11, 16, 13, 11, 4, 4, 4, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3, 15, 15, 15, 12, 3, 3, 6, 3, 3, 6, 3, 3, 3]

hand_balanced = np.reshape(hand_balanced,(42,13)).T
aux = np.zeros((13,42))
for i in range(13):
  aux[i,:] = hand_balanced[12-i,:]
np.savetxt("hand_balanced_cells.csv",aux,delimiter=',')

binary_tree = [6, 8, 8, 8, 6, 2, 2, 2, 2, 2, 2, 2, 2, 6, 8, 8, 8, 6, 2, 2, 4, 4, 2, 2, 2, 2, 6, 8, 8, 8, 6, 2, 2, 4, 4, 2, 2, 2, 48, 6, 8, 8, 8, 6, 2, 2, 4, 4, 2, 2, 2, 17, 6, 8, 8, 8, 6, 2, 2, 3, 3, 2, 2, 2, 2, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 6, 8, 8, 8, 6, 5, 5, 5, 4, 5, 5, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 12, 12, 12, 9, 12, 12, 3, 3, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 12, 12, 12, 9, 12, 12, 3, 3, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 12, 12, 12, 9, 12, 12, 3, 3, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 1, 49, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 1, 49, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 1, 1, 3, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 1, 1, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 12, 12, 12, 9, 12, 12, 3, 3, 6, 8, 8, 8, 6, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 12, 12, 12, 9, 12, 12, 3, 3, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 3, 4, 4, 4, 3, 8, 8, 8, 6, 8, 8, 2, 2, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 6, 8, 8, 8, 6, 2, 2, 2, 2, 2, 2, 2, 2, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 9, 12, 12, 12, 9, 3, 3, 3, 3, 3, 3, 3, 3, 6, 8, 8, 8, 6, 2, 2, 2, 2, 2, 2, 2, 2]

binary_tree = np.reshape(binary_tree,(42,13)).T
aux = np.zeros((13,42))
for i in range(13):
  aux[i,:] = binary_tree[12-i,:]
np.savetxt("binary_tree_cells.csv",aux,delimiter=',')
print(coef(fit)[2])
num_elements = 1000
var1 <- rnorm(num_elements)
var2 <- rnorm(num_elements)
fit <- lm (var2 - var1)
print(coef(fit)[2])
#Number of elements
num_elements = 1000
var1 <- rnorm(num_elements)
var2 <- rnorm(num_elements)
fit <- lm (var2 - var1)
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
z = coef(fit)[2]/se.coef(fit)[2]
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
z = coef(fit)[2]
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
z = coef(fit)[1]
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
z = coef(fit)[1]
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
z <- coef(fit)[2]/se.coef(fit)[2]
#Number of elements
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
z <- coef(fit)[2]/se(fit)
z <- coef(fit)[2]/se(var1)
#Number of elements
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (var2 ~ var1)
display(fit)
display (fit)
plot (fit)
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var2 ~ var1)
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var2 ~ var1)
print(formula)
print(fit)
num_elements = 1000
varx <- rnorm(num_elements,0,1)
vary <- rnorm(num_elements,0,1)
fit <- lm (formula = var2 ~ var1)
print(fit)
num_elements = 1000
varx <- rnorm(num_elements,0,1)
vary <- rnorm(num_elements,0,1)
fit <- lm (formula = varx ~ vary)
print(fit)
#Number of elements
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
print(fit)
#Number of elements
num_elements = 1000
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
print(fit)
## Exercise 3.3 (b)
z.scores <- rep (NA, 100)
for(k in 1:100){
var1 <- rnorm (1000, 0.1)
var2 <- rnorm (1000, 0.1)
lm3.3 <- lm (var2 ~ var1)
z.scores[k] <- coef(lm3.3)[2] / se.coef(lm3.3)[2]
}
sum ( abs( z.scores ) > 2)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(coef(fit)[2])
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
num_elements = 1000
se <- function(x) sqrt(var(x)/length(x))
var1 <- rnorm(num_elements,0,1)
var2 <- rnorm(num_elements,0,1)
fit <- lm (formula = var1 ~ var2)
z = coef(fit)[2]/se(var1)
print(xtable(opp_no_iter), type='latex')
library(xtable)
opp_no_iter <- read.csv("opp_no_iter.csv",stringsAsFactors=FALSE)
print(xtable(opp_no_iter), type='latex')
install.packages("xtable")
library(xtable)
opp_no_iter <- read.csv("opp_no_iter.csv",stringsAsFactors=FALSE)
print(xtable(opp_no_iter), type='latex')
opp_no_iter <- read.csv("opp_no_iter.csv",stringsAsFactors=FALSE)
setwd("~/TarekGhaddarMastersWork")
library(xtable)
setwd("~/TarekGhaddarMastersWork")
opp_no_iter <- read.csv("opp_no_iter.csv",stringsAsFactors=FALSE)
print(xtable(opp_no_iter), type='latex')
View(opp_no_iter)
View(opp_no_iter)
library(xtable)
setwd("~/TarekGhaddarMastersWork")
opp_no_iter <- read.csv("opp_no_iter.csv",stringsAsFactors=FALSE)
gsub ("...","=",opp_no_iter,fixed = T)
print(xtable(opp_no_iter), type='latex')
gsub ("...","=",opp_no_iter,fixed = T)
q()
opp_iter <- read.csv("opp_iter.csv",stringsAsFactors = FALSE)
print(xtable(opp_iter),type = 'latex')
print(xtable(caption = "The metric behavior of the first test case after 10 load balancing iterations.",opp_iter),type = 'latex')
opp_diff <- read.csv("opp_diff.csv",stringsAsFactors = FALSE)
print(xtable(caption = "The difference in metric behavior between no iteration and 10 iterations. The closer the z-value to zero, the better the improvement.",opp_iter),type = 'latex')
opp_diff <- read.csv("opp_diff.csv",stringsAsFactors = FALSE)
print(xtable(caption = "The difference in metric behavior between no iteration and 10 iterations. The closer the z-value to zero, the better the improvement.",opp_iter),type = 'latex')
opp_diff <- read.csv("opp_diff.csv",stringsAsFactors = FALSE)
print(xtable(caption = "The difference in metric behavior between no iteration and 10 iterations. The closer the z-value to zero, the better the improvement.",opp_diff),type = 'latex')
same_no_iter <- read.csv("same_no_iter.csv",stringsAsFactors=FALSE)
print(xtable(caption = "The metric behavior of the second test case after no load balancing iterations.",same_no_iter), type='latex')
same_iter <- read.csv("same_iter.csv",stringsAsFactors=FALSE)
print(xtable(caption= "The metric behavior of the second test case after 10 load balancing iterations.",same_iter),type = 'latex')
same_diff <- read.csv("same_diff.csv",stringsAsFactors = FALSE)
print(xtable(caption = "The difference in metric behavior between no iteration and 10 iterations. The closer the z-value to zero, the better the improvement.",same_diff),type = 'latex')
lattice_no_iter <- read.csv("lattice_no_iter.csv", stringsAsFactors = FALSE)
print(xtable(caption = "The metric behavior of the third test case after no load balancing iterations.",lattice_no_iter), type='latex')
lattice_iter <- read.csv("lattice_iter.csv", stringsAsFactors = FALSE)
print(xtable(caption= "The metric behavior of the third test case after 10 load balancing iterations.",lattice_iter),type = 'latex')
lattice_diff <- read.csv("lattice_diff.csv", stringsAsFactors = FALSE)
print(xtable(caption = "The difference in metric behavior between no iteration and 10 iterations. The closer the z-value to zero, the better the improvement.",lattice_diff),type = 'latex')
